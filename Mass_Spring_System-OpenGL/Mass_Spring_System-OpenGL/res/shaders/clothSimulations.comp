#version 460

//Size of the compute workgroups
layout ( local_size_x = 16, local_size_y = 16, local_size_z = 1 ) in;

// Vertex params
struct Vertex {
    vec4 pos;
	vec4 vel;
	vec4 color;
	vec4 normal;
	vec4 oldPos;
	vec4 pinned;
};

// Wind params
struct WindInfo {
	vec4 position;
	vec4 forward;
	float forceMult;
	float fullForceRadius;
	float attenuationRadius;
	float referenceDistance;
};
uniform WindInfo wind;

// Input buffer of the shader
layout ( std430, binding = 0 ) buffer VertexBufferIn {
	Vertex verticesIn[];
};

// Output buffer of the shader
layout ( std430, binding = 1 ) buffer VertexBufferOut {
	Vertex verticesOut[];
};

// Spring params
uniform float elasticStiffness;
uniform float drag;
uniform float constShearMult;
uniform float constBendMult;
uniform float restLenHV;
uniform float restLenDiagonal;

// Cloth dimensions
uniform vec4 gridDims;

// Simulation params
uniform float particleMass;
uniform vec4 gravityAcceleration;
uniform float deltaTime;

// Calculate elastic force between the particles at the given positions
vec3 ElasticForce (vec3 myPosition, vec3 otherPosition, float restLength) 
{
	vec3 vectorToOther = otherPosition - myPosition;
	float maxDist = restLength * 1.1;
	float minDist = restLength * 0.9;
	float distance = length(vectorToOther);

	// Hooke's law	
	vec3 force=elasticStiffness * (distance - restLength) * normalize(vectorToOther);
	
	return force;
}

// Calculate the next position and velocity using the euler symplectic integrator
void EulerIntegrator (uint idx, vec3 acceleration, vec3 velocity, vec3 position) 
{
	verticesOut[idx].oldPos = vec4(position, 1.0);

	vec3 newVelocity = velocity + acceleration * deltaTime;

	vec3 newPosition = position + newVelocity * deltaTime;

	verticesOut[idx].pos = vec4(newPosition, 1.0);

	verticesOut[idx].vel = vec4(newVelocity, 0.0);
}

// Calculate the next position and velocity using the verlet integrator
void VerletIntegrator (uint idx, vec3 acceleration, vec3 position, vec3 oldPosition) 
{
	vec3 deltaAcceleration = acceleration * deltaTime * deltaTime;

	vec3 deltaPosition = (position - oldPosition) * drag;
	
	// Safety check to prevent system explosion in edge cases
	if(length (deltaPosition) > 100) deltaPosition *= 0.0001;

	vec3 nextPosition =	position + deltaPosition + deltaAcceleration;

	verticesOut[idx].oldPos = vec4(position, 1.0);
	verticesOut[idx].pos = vec4(nextPosition, 1.0);
	verticesOut[idx].vel = vec4(((nextPosition - position) * deltaTime), 0.0);
}

// Tells if the particle of the corrisponding index is pinned
bool IsPinned (uint linearIdx) {
	return verticesIn[linearIdx].pinned.x >= 0.5;
}

// Calculate the total elastic force with all the connected particles as if them are connected with springs
vec3 ComputeElasticForce (uint linearIdx, uvec3 particleGridDims, uvec3 globalIdx, vec3 position) 
{
	vec3 totalForce = vec3(0,0,0);

	// Structure Spring - Up
	totalForce = (globalIdx.y < particleGridDims.y - 1) ? 
		totalForce + (ElasticForce(position, verticesIn[linearIdx + particleGridDims.x].pos.xyz, restLenHV)) :
		totalForce;
	// Structure Spring - Down
	totalForce = (globalIdx.y > 0) ?
		totalForce + (ElasticForce(position, verticesIn[linearIdx - particleGridDims.x].pos.xyz, restLenHV)) :
		totalForce;
	// Structure Spring - Left
	totalForce = (globalIdx.x > 0) ?
		totalForce + (ElasticForce(position, verticesIn[linearIdx-1].pos.xyz, restLenHV)) :
		totalForce;
	// Structure Spring - Right
	totalForce = (globalIdx.x < particleGridDims.x - 1) ?
		totalForce + (ElasticForce(position, verticesIn[linearIdx + 1].pos.xyz, restLenHV)) :
		totalForce;

	// Shear Spring - Upper-Left
	totalForce = ((globalIdx.x > 0) && (globalIdx.y < particleGridDims.y - 1)) ?
		totalForce + (constShearMult * ElasticForce(position, verticesIn[linearIdx + particleGridDims.x - 1].pos.xyz, restLenDiagonal)) :
		totalForce;
	// Shear Spring - Lower-Left
	totalForce = ((globalIdx.x > 0) && (globalIdx.y > 0)) ?
		totalForce + (constShearMult * ElasticForce(position, verticesIn[linearIdx - particleGridDims.x - 1].pos.xyz, restLenDiagonal)) :
		totalForce;
	// Shear Spring - Upper-Right
	totalForce = ((globalIdx.x < particleGridDims.x - 1) && (globalIdx.y < particleGridDims.y - 1)) ?
		totalForce + (constShearMult * ElasticForce(position, verticesIn[linearIdx + particleGridDims.x + 1].pos.xyz, restLenDiagonal)) :
		totalForce;
	// Shear Spring - Lower-Right
	totalForce = (globalIdx.x < particleGridDims.x - 1) && (globalIdx.y > 0) ?
		totalForce + (constShearMult * ElasticForce(position, verticesIn[linearIdx - particleGridDims.x + 1].pos.xyz, restLenDiagonal)) :
		totalForce;

	// Bend Spring - Up
	totalForce = (globalIdx.y < particleGridDims.y - 2) ?
		totalForce + (constBendMult * ElasticForce(position, verticesIn[linearIdx + 2 * particleGridDims.x].pos.xyz, restLenHV * 2)) :
		totalForce;

	// Bend Spring - Down
	totalForce = (globalIdx.y > 1) ?
		totalForce + (constBendMult * ElasticForce(position, verticesIn[linearIdx - 2 * particleGridDims.x].pos.xyz, restLenHV * 2)):
		totalForce;
		
	// Bend Spring - Left
	totalForce = (globalIdx.x > 1) ?
		totalForce + (constBendMult * ElasticForce(position, verticesIn[linearIdx - 2].pos.xyz, restLenHV * 2)) :
		totalForce;

	// Bend Spring - Right
	totalForce = (globalIdx.x < particleGridDims.x - 2) ?
		totalForce + (constBendMult * ElasticForce(position, verticesIn[linearIdx + 2].pos.xyz, restLenHV * 2)) :
		totalForce;

	return totalForce;
}

// Calculate the wind force applied to the particle, if any
vec3 ComputeWindForce(vec3 position) 
{
	vec3 vectorToVertex = position - wind.position.xyz;	

	vec3 windDir = wind.forward.xyz;

	float dotWindZ = dot (windDir, normalize(vectorToVertex));
	float windMult = wind.forceMult;

	vec3 forwardMaxRadiusPoint = vec3(0, wind.fullForceRadius, 0) + windDir * wind.referenceDistance;
	float maxDot = dot(windDir, normalize(forwardMaxRadiusPoint));

	vec3 forwardAttRadiusPoint = vec3(0, wind.fullForceRadius + wind.attenuationRadius, 0) + windDir * wind.referenceDistance;
	float attDot = dot(windDir, normalize(forwardAttRadiusPoint));

	if ( dotWindZ < attDot ) {
		windMult = 0;
	}

	if(dotWindZ < maxDot) {
		float ratio = (dotWindZ - attDot) / (maxDot - attDot);

		windMult = windMult * ratio;
	}

	return windDir * windMult;
}

void main() 
{
	uvec3 particleGridDims = uvec3(gridDims.x, gridDims.y, 1);
	uvec3 globalIdx = gl_GlobalInvocationID; 
	
	// Linear index of the particle
	uint linearIdx = globalIdx.x + (globalIdx.y * particleGridDims.x);
	
	// Safety check
	if (globalIdx.x >= particleGridDims.x || globalIdx.y >= particleGridDims.y) 
		return;

	// Keep pinned particles fixed
	if (IsPinned(linearIdx)) {
		verticesOut[linearIdx].pos = verticesIn[linearIdx].pos;
		verticesOut[linearIdx].oldPos = verticesIn[linearIdx].oldPos;
		verticesOut[linearIdx].vel = vec4(0.0);
		return;
	}
	
	vec3 position = verticesIn[linearIdx].pos.xyz;
	vec3 oldPosition = verticesIn[linearIdx].oldPos.xyz;
	vec3 velocity = verticesIn[linearIdx].vel.xyz;

	vec3 gravity = gravityAcceleration.xyz;
	vec3 gravityForce = gravity * particleMass;
	
	// Total force applied to the particle
	vec3 totalForce = vec3(0,0,0.000000001);

	// Gravity
	totalForce += gravityForce;

	// Wind
	totalForce += ComputeWindForce(position);
	
	// Springs
	totalForce += ComputeElasticForce(linearIdx, particleGridDims, globalIdx, position);

	// Stokes's law
	totalForce -= velocity * drag;

	// Compute acceleration due to total force to the particle
	vec3 acceleration = totalForce / particleMass;

	// Update the particles position and velocity
	EulerIntegrator(linearIdx, acceleration, velocity, position);

	// Update the particles position and velocity
	//VerletIntegrator (linearIdx, acceleration, position, oldPosition); 
}