#version 460

//Worksize
layout ( local_size_x = 16, local_size_y = 1, local_size_z = 1 ) in;

struct Node {
	vec4 pos;
	vec4 vel;
	vec4 oldPos;
	vec4 pinned;
	vec4 currentUp;
};

struct WindInfo {
	vec4 position;
	vec4 forward;
	vec4 right;
	vec4 up;
	float forceMult;
	float fullForceRadius;
	float attenuationRadius;
};

layout ( std430, binding = 0 ) buffer NodesBufferIn {
	Node nodesIn[];
};
layout ( std430, binding = 1 ) buffer NodesBufferOut {
	Node nodesOut[];
};

uniform float restLenHV;

uniform float constShearMult;
uniform float constBendMult;

uniform float elasticStiffness;
uniform float damping;
uniform float particleMass;
uniform vec4 gravityAcceleration;
uniform float deltaTime;

uniform uint ropeDim;
uniform float radius;

uniform WindInfo wind;

struct ConstraintParams {
	float correctionDumping;
	float constraintDistanceMult;
	float selfCollisionDistanceMult;
	float sphereRepulsionDistMult;
	float sphereRepulsionDamping;
};
uniform ConstraintParams constraintParams;

#define MAX_SPHERES 10
struct Sphere {
	vec4 sphereCenter;
	float sphereRadius;
	bool sphereActive;
};
uniform uint sphereCount;
uniform Sphere spheres[MAX_SPHERES];

vec3 ElasticForce (vec3 myPosition, vec3 otherPosition, float restLength) 
{
	vec3 vectorToOther = otherPosition - myPosition;
	float distance = length(vectorToOther);
	vec3 force=elasticStiffness * (distance - restLength) * normalize(vectorToOther);
	
	return force;
}

bool IsPinned () {
	return nodesIn[gl_GlobalInvocationID.x].pinned.x >= 0.5;
}

vec3 ComputeElasticForce (vec3 position) 
{
	vec3 totalForce = vec3(0,0,0);

	// STRUCTURE - Horizonal / Vertical
	
	// Structure Spring - Left
	totalForce = (gl_GlobalInvocationID.x > 0) ?
		totalForce + constShearMult * ElasticForce(position, nodesIn[gl_GlobalInvocationID.x - 1].pos.xyz, restLenHV) :
		totalForce;
	// Structure Spring - Right
	totalForce = (gl_GlobalInvocationID.x < ropeDim - 1) ?
		totalForce + constShearMult * ElasticForce(position, nodesIn[gl_GlobalInvocationID.x + 1].pos.xyz, restLenHV) :
		totalForce;

	// BEND - Distance 2  Horizonal / Vertical 
	
	// Bend Spring - Left
	totalForce = (gl_GlobalInvocationID.x > 1) ?
		totalForce + constBendMult * ElasticForce(position, nodesIn[gl_GlobalInvocationID.x - 2].pos.xyz, restLenHV * 2) :
		totalForce;

	// Bend Spring - Right
	totalForce = (gl_GlobalInvocationID.x < ropeDim - 2) ?
		totalForce + constBendMult * ElasticForce(position, nodesIn[gl_GlobalInvocationID.x + 2].pos.xyz, restLenHV * 2) :
		totalForce;
		
	return totalForce;
}

vec3 ComputeWindForce(vec3 position) 
{
	vec3 vectorToVertex = position - wind.position.xyz;	
	vec3 windDir = wind.forward.xyz;
	float dotWindZ = dot (windDir, normalize(vectorToVertex));
	float windMult = wind.forceMult;

	float referenceDistance = 1000;

	vec3 forwardMaxRadiusPoint = vec3(0, wind.fullForceRadius, 0) + windDir * referenceDistance;
	float maxDot = dot(windDir, normalize(forwardMaxRadiusPoint));

	vec3 forwardAttRadiusPoint = vec3(0, wind.fullForceRadius + wind.attenuationRadius, 0) + windDir * referenceDistance;
	float attDot = dot(windDir, normalize(forwardAttRadiusPoint));

	if ( dotWindZ < attDot ) {
		return vec3(0,0,0);
	}

	if(dotWindZ < maxDot) {
		float ratio = (dotWindZ - attDot) / (maxDot - attDot);

		windMult = windMult * ratio;
	}

	return windDir * windMult;
}

vec3 ApplyConstraints (uint otherIndex, float restLen) 
{
	vec3 position = nodesIn[gl_GlobalInvocationID.x].pos.xyz;
	vec3 otherPosition = nodesIn[otherIndex].pos.xyz;

	vec3 vectorToOther = otherPosition - position;
	float distanceToOther = length(vectorToOther);

	float maxDistance = restLen * constraintParams.constraintDistanceMult;

	vec3 correction = vec3(0,0,0);
	float diff = distanceToOther - maxDistance;

	if (diff > 0) 
	{
		correction = normalize(vectorToOther) * diff * 0.5;

		correction = (nodesIn[otherIndex].pinned.x > 0.5) ? 
			correction * 2 :
			correction;		
	}

	return correction;
}

vec3 ComputeDistanceCorrection () 
{
	vec3 totalCorrection = vec3(0,0,0);

	// Bend Spring - Left
	totalCorrection = (gl_GlobalInvocationID.x > 1) ?
		totalCorrection + ApplyConstraints(gl_GlobalInvocationID.x - 2, restLenHV * 2) :
		totalCorrection;

	// Bend Spring - Right
	totalCorrection = (gl_GlobalInvocationID.x < ropeDim - 2) ?
		totalCorrection + ApplyConstraints(gl_GlobalInvocationID.x + 2, restLenHV * 2) :
		totalCorrection;

	
	// Structure Spring - Left
	totalCorrection = (gl_GlobalInvocationID.x > 0) ?
		totalCorrection + ApplyConstraints(gl_GlobalInvocationID.x - 1, restLenHV) :
		totalCorrection;


	// Structure Spring - Right
	totalCorrection = (gl_GlobalInvocationID.x < ropeDim - 1) ?
		totalCorrection + (ApplyConstraints(gl_GlobalInvocationID.x + 1, restLenHV)) :
		totalCorrection;

	return totalCorrection;
}

vec3 ComputeSelfCollision(float restLength) {
	vec3 correction = vec3(0,0,0);

	float epsilon = restLength * constraintParams.selfCollisionDistanceMult;

	for (int i = 0; i < ropeDim; i++) 
	{
		if (i == gl_GlobalInvocationID.x) {
			continue;
		}

		vec3 dir = nodesIn[i].pos.xyz - nodesIn[gl_GlobalInvocationID.x].pos.xyz;
		float dist = length(dir);
		vec3 norm = -normalize(dir);
		float correctionMult;
		vec3 currentCorrection = vec3(0,0,0);
		correctionMult = (nodesIn[i].pinned.x > 0.5) ? 
							1 :
							0.5;
		currentCorrection = (dist < epsilon && i != gl_GlobalInvocationID.x) ?
								currentCorrection + norm * (epsilon - dist) * correctionMult :
								currentCorrection; 

		correction += currentCorrection;
	}

	return correction;
}

void main() 
{
	// Safety check
	if (gl_GlobalInvocationID.x >= ropeDim) 
		return;

	// Keep pinned particles fixed
	if (IsPinned()) {
		nodesOut[gl_GlobalInvocationID.x].pos = nodesIn[gl_GlobalInvocationID.x].pos;
		nodesOut[gl_GlobalInvocationID.x].oldPos = nodesIn[gl_GlobalInvocationID.x].oldPos;
		nodesOut[gl_GlobalInvocationID.x].vel = vec4(0.0);
		return;
	}
	
	vec3 totalForce = vec3(0,0,0);

	vec3 position = nodesIn[gl_GlobalInvocationID.x].pos.xyz;
	vec3 oldPosition = nodesIn[gl_GlobalInvocationID.x].oldPos.xyz;
	vec3 velocity = nodesIn[gl_GlobalInvocationID.x].vel.xyz;

	vec3 gravity = gravityAcceleration.xyz;
	vec3 gravityForce = gravity * particleMass;
	
	// Gravity
	totalForce += gravityForce;

	// Wind
	totalForce += ComputeWindForce(position);

	// Springs
	totalForce += ComputeElasticForce(position);

	// Air friction
	totalForce -= velocity * damping * damping;

	vec3 acceleration = totalForce / particleMass;

	//Euler
	
	vec3 newVelocity = velocity + acceleration * deltaTime;
	vec3 newPosition = position + newVelocity * deltaTime;	
	/*
	*/
	//

	//verlet
	/*
	vec3 deltaAcceleration = acceleration * deltaTime * deltaTime;
	vec3 deltaPosition = (position - oldPosition) * damping;
	if(length (deltaPosition) > 10) deltaPosition *= 0.001;
	vec3 newPosition =	position + deltaPosition + deltaAcceleration;
	vec3 newVelocity = (newPosition - position) / deltaTime;
	*/
	//

	// Distance constraints
	vec3 distCorrection = vec3(0,0,0);
	distCorrection = ComputeDistanceCorrection() * constraintParams.correctionDumping;
	
	// Self collisions
	vec3 selfCollCorrection = vec3(0,0,0);
	selfCollCorrection = ComputeSelfCollision(restLenHV + radius*0.01);
	
	newPosition += distCorrection;
	newPosition += selfCollCorrection;

	newVelocity = (newPosition - position) / deltaTime;
	float maxVelocity = 100;

	newVelocity = min(newVelocity, maxVelocity);
	/*
	
	newVelocity = (length(newVelocity) >= maxVelocity) ? newVelocity * 0.0001 : newVelocity;
	*/
	//TODO: mettere questa friction nel cloth dopo i constraints
	//newVelocity *= 0.999;

	//COLLISION DETECTION
	for (int i = 0; i < sphereCount; i++)
	{
		//bool currSphereActive = sphereActive[i];
		if (spheres[i].sphereActive)
		{
			//vec3 currSpherePos = sphereCenter[i].xyz;
			//float currSphereRadius = sphereRadius[i];

			vec3 sphereDist = newPosition - spheres[i].sphereCenter.xyz;

			if (length(sphereDist) < spheres[i].sphereRadius + restLenHV * constraintParams.sphereRepulsionDistMult) 
			{
				// If the particle is inside the sphere, push it to the outer radius
				newPosition = spheres[i].sphereCenter.xyz + normalize(sphereDist) 
									* (spheres[i].sphereRadius + restLenHV  * constraintParams.sphereRepulsionDistMult);
				// Cancel out velocity
				newVelocity *= constraintParams.sphereRepulsionDamping;
			}
		}
	}



	nodesOut[gl_GlobalInvocationID.x].oldPos = vec4(position, 1.0);
	nodesOut[gl_GlobalInvocationID.x].pos = vec4(newPosition, 1.0);
	nodesOut[gl_GlobalInvocationID.x].vel = vec4(newVelocity, 0.0);
	
}