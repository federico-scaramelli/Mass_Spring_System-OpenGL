#version 460

#define MAX_SPHERES 5

//Worksize
layout ( local_size_x = 16, local_size_y = 1, local_size_z = 1 ) in;

struct Node {
	vec4 pos;
	vec4 vel;
	vec4 oldPos;
	vec4 pinned;
};

struct Vertex {
    vec4 pos;
	vec4 vel;
	vec4 color;
	vec4 normal;
	vec4 oldPos;
	vec4 pinned;
};

layout ( std430, binding = 0 ) buffer NodesBufferIn {
	Node nodesIn[];
};

layout ( std430, binding = 1 ) buffer NodesBufferOut {
	Node nodesOut[];
};

layout ( std430, binding = 2 ) buffer VertexBufferOut {
	Vertex verticesOut[];
};

vec2[8] vertexPositionsWeigths =
{
	vec2(1.0,		0.0),		//0
	vec2(0.707,		0.707),		//1
	vec2(0.0,		1.0),		//2
	vec2(-0.707,	0.707),		//3
	vec2(-1.0,		0.f),		//4
	vec2(-0.707,	-0.707),	//5
	vec2(0.0,		-1.0),		//6
	vec2(0.707,		-0.707)		//7
};

uniform float verticesDim;

void UpdateNormals(uint linearIdx, uvec3 particleGridDims, uvec3 globalIdx) {
	
}

void CopyData(vec3 position, vec3 oldPosition, vec3 velocity, 
				uint linearIdx, uvec3 particleGridDims, uvec3 globalIdx) {
	nodesOut[linearIdx].pos = vec4(position, 1.0);
	nodesOut[linearIdx].oldPos = vec4(oldPosition, 1.0);
	nodesOut[linearIdx].vel = vec4(velocity, 0.0);
}

void UpdateVertices() {
	
}

void main() 
{
	uvec3 particleGridDims = uvec3(verticesDim, 1, 1);
	uvec3 globalIdx = gl_GlobalInvocationID; 
	uint linearIdx = globalIdx.x + (globalIdx.y * particleGridDims.x);
	
	// Safety check
	if (globalIdx.x >= particleGridDims.x) 
		return;


	//CopyData();
}