#version 460

#define MAX_SPHERES 5

//Worksize
layout ( local_size_x = 16, local_size_y = 1, local_size_z = 1 ) in;

struct Node {
	vec4 pos;
	vec4 vel;
	vec4 oldPos;
	vec4 pinned;
};

struct Vertex {
    vec4 pos;
	vec4 vel;
	vec4 color;
	vec4 normal;
	vec4 oldPos;
	vec4 pinned;
};

layout ( std430, binding = 0 ) buffer NodesBufferIn {
	Node nodesIn[];
};

layout ( std430, binding = 1 ) buffer NodesBufferOut {
	Node nodesOut[];
};

layout ( std430, binding = 2 ) buffer VertexBufferOut {
	Vertex verticesOut[];
};

vec2[8] vertexPositionsWeigths =
{
	vec2(1.0,		0.0),		//0
	vec2(0.707,		0.707),		//1
	vec2(0.0,		1.0),		//2
	vec2(-0.707,	0.707),		//3
	vec2(-1.0,		0.f),		//4
	vec2(-0.707,	-0.707),	//5
	vec2(0.0,		-1.0),		//6
	vec2(0.707,		-0.707)		//7
};

uniform uint ropeDim;		//Node num
uniform uint verticesDim;  //Vertices num
uniform float radius;

void UpdateNormals() {
	
}

void main() 
{
	// Safety check
	if (gl_GlobalInvocationID.x >= verticesDim) 
		return;

	uint nodeIndex = gl_GlobalInvocationID.x / 8;
	uint nodeWheightsIndex = gl_GlobalInvocationID.x - nodeIndex * 8;

	vec3 nodePosition = nodesIn[nodeIndex].pos.xyz;

	vec3 forward = (nodeIndex == ropeDim - 1) ?
				nodesIn[nodeIndex].pos.xyz - nodesIn[nodeIndex - 1].pos.xyz :
				nodesIn[nodeIndex + 1].pos.xyz - nodesIn[nodeIndex].pos.xyz; 

	forward = normalize(forward);
	
	vec3 right = normalize(cross(forward, vec3(0,1,0)));
	vec3 up = normalize(cross(right, forward));

	vec3 positionSide = right * vertexPositionsWeigths[nodeWheightsIndex].x * radius;
	vec3 positionFront = up * vertexPositionsWeigths[nodeWheightsIndex].y * radius;
	vec3 vertexPosition = positionSide + positionFront;
	
	//vertexPosition += vec3(nodeIndex * 10, 0, 0);
	//vertexPosition += vec3(diffPos * nodeIndex, 0, 0);
	vertexPosition += nodesIn[nodeIndex].pos.xyz;

	verticesOut[gl_GlobalInvocationID.x].pos = vec4(vertexPosition ,1.0);

	if(nodeWheightsIndex == 0){
		nodesOut[nodeIndex].pos = nodesIn[nodeIndex].pos ;
		nodesOut[nodeIndex].oldPos = nodesIn[nodeIndex].oldPos ;
		nodesOut[nodeIndex].vel = nodesIn[nodeIndex].vel ;
	}

	//CopyData();
}