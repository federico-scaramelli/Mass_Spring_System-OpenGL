#version 460

//Size of the compute workgroups
layout ( local_size_x = 16, local_size_y = 1, local_size_z = 1 ) in;

// Node params
struct Node {
	vec4 pos;
	vec4 vel;
	vec4 oldPos;
	vec4 pinned;
	vec4 currentUp;
};

// Vertex params
struct Vertex {
    vec4 pos;
	vec4 vel;
	vec4 color;
	vec4 normal;
	vec4 oldPos;
	vec4 pinned;
};

// Input buffer of the shader
layout ( std430, binding = 0 ) buffer NodesBufferIn {
	Node nodesIn[];
};

// Output buffer of the shader used to copy the input node buffer into the output node buffer
layout ( std430, binding = 1 ) buffer NodesBufferOut {
	Node nodesOut[];
};

// Output buffer of the shader for the vertices positions
layout ( std430, binding = 2 ) buffer VertexBufferOut {
	Vertex verticesOut[];
};

// Wheights used to calculate the positions of the vertex around the node, given that each node has 8 vertices around
vec2[8] vertexPositionsWeigths =
{
	vec2(1.0,		0.0),		//0
	vec2(0.707,		0.707),		//1
	vec2(0.0,		1.0),		//2
	vec2(-0.707,	0.707),		//3
	vec2(-1.0,		0.0),		//4
	vec2(-0.707,	-0.707),	//5
	vec2(0.0,		-1.0),		//6
	vec2(0.707,		-0.707)		//7
};

// Rope dimensions
uniform uint ropeDim;		
uniform uint verticesDim;   
uniform float radius;

// Rotate a vector clockwise
vec3 RotateClockwhise(vec3 vector){
	return vec3(vector.y, -vector.x, vector.z); //(y, -x, z)
}

void main() 
{
	// Safety check
	if (gl_GlobalInvocationID.x >= verticesDim) 
		return;

	uint nodeIndex = gl_GlobalInvocationID.x / 8;
	uint nodeWheightsIndex = gl_GlobalInvocationID.x - (nodeIndex * 8);

	vec3 nodePosition = nodesIn[nodeIndex].pos.xyz;

	// Calculate next node position, if last node then double up the precedent 
	vec3 nextNodePosition = (nodeIndex == ropeDim - 1) ?
		nodePosition + (nodePosition - nodesIn[nodeIndex - 1].pos.xyz) : 
		nodesIn[nodeIndex + 1].pos.xyz;

	// Calculate precedent node position, if first node then double up the next 
	vec3 precNodePosition = (nodeIndex == 0) ?
		nodePosition + (nodePosition - nodesIn[nodeIndex + 1].pos.xyz) : 
		nodesIn[nodeIndex - 1].pos.xyz;

	// Global up direction (currently not used)
	vec3 worldUp = vec3(0,1,0);

	// Current node up direction (currently not used)
	vec3 currentUp = nodesIn[nodeIndex].currentUp.xyz;

	//Rope but tangles
/*
	vec3 forwardNext = normalize(nextNodePosition - nodePosition);
	vec3 rightNext = normalize(cross(forwardNext, currentUp));
	vec3 upNext = normalize(cross(rightNext, forwardNext));

	vec3 forwardPrec = -normalize(precNodePosition - nodePosition);	
	vec3 rightPrec = normalize(cross(forwardPrec, currentUp));
	vec3 upPrec = normalize(cross(rightPrec, forwardPrec));

	vec3 rightFinal = normalize(rightNext + rightPrec);
	vec3 upFinal = normalize(upNext + upPrec);

	vec3 positionSide = rightFinal * vertexPositionsWeigths[nodeWheightsIndex].x * radius;
	vec3 positionFront = upFinal * vertexPositionsWeigths[nodeWheightsIndex].y * radius;
	
	vec3 vertexPosition = positionSide + positionFront;
	vertexPosition += nodesIn[nodeIndex].pos.xyz;

*/

	// Calculate the vertex position around the normal using an orthonormal base calculated from the direction towards the next/precedent node
	vec3 forwardNext = normalize(nextNodePosition - nodePosition);
	vec3 forwardPrec = -normalize(precNodePosition - nodePosition);	
	
	// Forward used is the average of the direction towards next node and precedent node
	vec3 forwardFinal = normalize(forwardNext + forwardPrec);

	vec3 origin = nodesIn[nodeIndex].pos.xyz;;
	
	float offsetX = vertexPositionsWeigths[nodeWheightsIndex].x * radius;
	float offsetY = vertexPositionsWeigths[nodeWheightsIndex].y * radius;
	float offsetZ = 0;
	
	vec3 rightFinal = normalize(RotateClockwhise(forwardFinal));
    vec3 upFinal = normalize(cross(forwardFinal, rightFinal));  

	vec3 positionRight = rightFinal * offsetX;
	vec3 positionUp = upFinal * offsetY;
	
	vec3 vertexPosition = positionRight + positionUp;
	vertexPosition += origin;

	//If first vertex of node, copy node info to output node buffer
	if(nodeWheightsIndex == 0) {
		nodesOut[nodeIndex].pos = nodesIn[nodeIndex].pos;
		nodesOut[nodeIndex].oldPos = nodesIn[nodeIndex].oldPos;
		nodesOut[nodeIndex].vel = nodesIn[nodeIndex].vel;
		
		nodesOut[nodeIndex].currentUp = vec4(upFinal, 0.0);
	}

	//Update vertex position
	verticesOut[gl_GlobalInvocationID.x].pos = vec4(vertexPosition ,1.0);


	//Update vertex normal
	vec3 normal;
	normal = normalize(vertexPosition - origin);

	normal = (nodeIndex == 0) ?
		normalize(normal - forwardNext) : 
		normal;

	normal = (nodeIndex == ropeDim - 1) ?
		normalize(normal - forwardPrec) : 
		normal;

	verticesOut[gl_GlobalInvocationID.x].normal = vec4(normal, 0.0);
}