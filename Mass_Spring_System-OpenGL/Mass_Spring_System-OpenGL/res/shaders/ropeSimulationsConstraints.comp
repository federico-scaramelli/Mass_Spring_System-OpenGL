#version 460

//Size of the compute workgroups
layout ( local_size_x = 16, local_size_y = 1, local_size_z = 1 ) in;

// Node params
struct Node {
	vec4 pos;
	vec4 vel;
	vec4 oldPos;
	vec4 pinned;
	vec4 currentUp;
};

// Wind params
struct WindInfo {
	vec4 position;
	vec4 forward;
	float forceMult;
	float fullForceRadius;
	float attenuationRadius;
	float referenceDistance;
};
uniform WindInfo wind;

// Input buffer of the shader
layout ( std430, binding = 0 ) buffer NodesBufferIn {
	Node nodesIn[];
};

// Output buffer of the shader
layout ( std430, binding = 1 ) buffer NodesBufferOut {
	Node nodesOut[];
};

// Spring params
uniform float restLenHV;
uniform float constShearMult;
uniform float constBendMult;
uniform float elasticStiffness;
uniform float drag;

// Simulation params
uniform float particleMass;
uniform vec4 gravityAcceleration;
uniform float deltaTime;

// Rope dimensions
uniform uint ropeDim;

vec3 ElasticForce (vec3 myPosition, vec3 otherPosition, float restLength) 
{
	vec3 vectorToOther = otherPosition - myPosition;
	float distance = length(vectorToOther);
	vec3 force=elasticStiffness * (distance - restLength) * normalize(vectorToOther);
	
	return force;
}

// Tells if the particle is pinned
bool IsPinned () {
	return nodesIn[gl_GlobalInvocationID.x].pinned.x >= 0.5;
}

// Calculate elastic force between the particles at the given positions
vec3 ComputeElasticForce (vec3 position) 
{
	vec3 totalForce = vec3(0,0,0);

	// Structure Spring - Left
	totalForce = (gl_GlobalInvocationID.x > 0) ?
		totalForce + constShearMult * ElasticForce(position, nodesIn[gl_GlobalInvocationID.x - 1].pos.xyz, restLenHV) :
		totalForce;

	// Structure Spring - Right
	totalForce = (gl_GlobalInvocationID.x < ropeDim - 1) ?
		totalForce + constShearMult * ElasticForce(position, nodesIn[gl_GlobalInvocationID.x + 1].pos.xyz, restLenHV) :
		totalForce;

	// Bend Spring - Left
	totalForce = (gl_GlobalInvocationID.x > 1) ?
		totalForce + constBendMult * ElasticForce(position, nodesIn[gl_GlobalInvocationID.x - 2].pos.xyz, restLenHV * 2) :
		totalForce;

	// Bend Spring - Right
	totalForce = (gl_GlobalInvocationID.x < ropeDim - 2) ?
		totalForce + constBendMult * ElasticForce(position, nodesIn[gl_GlobalInvocationID.x + 2].pos.xyz, restLenHV * 2) :
		totalForce;
		
	return totalForce;
}

// Calculate the wind force applied to the particle, if any
vec3 ComputeWindForce(vec3 position) 
{
	vec3 vectorToVertex = position - wind.position.xyz;	
	vec3 windDir = wind.forward.xyz;
	float dotWindZ = dot (windDir, normalize(vectorToVertex));
	float windMult = wind.forceMult;

	vec3 forwardMaxRadiusPoint = vec3(0, wind.fullForceRadius, 0) + windDir * wind.referenceDistance;
	float maxDot = dot(windDir, normalize(forwardMaxRadiusPoint));

	vec3 forwardAttRadiusPoint = vec3(0, wind.fullForceRadius + wind.attenuationRadius, 0) + windDir * wind.referenceDistance;
	float attDot = dot(windDir, normalize(forwardAttRadiusPoint));

	if ( dotWindZ < attDot ) {
		return vec3(0,0,0);
	}

	if(dotWindZ < maxDot) {
		float ratio = (dotWindZ - attDot) / (maxDot - attDot);

		windMult = windMult * ratio;
	}

	return windDir * windMult;
}

void main() 
{
	// Safety check
	if (gl_GlobalInvocationID.x >= ropeDim) 
		return;

	// Keep pinned particles fixed
	if (IsPinned()) {
		nodesOut[gl_GlobalInvocationID.x].pos = nodesIn[gl_GlobalInvocationID.x].pos;
		nodesOut[gl_GlobalInvocationID.x].oldPos = nodesIn[gl_GlobalInvocationID.x].oldPos;
		nodesOut[gl_GlobalInvocationID.x].vel = vec4(0.0);
		return;
	}
	
	vec3 position = nodesIn[gl_GlobalInvocationID.x].pos.xyz;
	vec3 oldPosition = nodesIn[gl_GlobalInvocationID.x].oldPos.xyz;
	vec3 velocity = nodesIn[gl_GlobalInvocationID.x].vel.xyz;

	// Total force applied to the particle
	vec3 totalForce = vec3(0,0,0.00001);

	vec3 gravity = gravityAcceleration.xyz;
	vec3 gravityForce = gravity * particleMass;
	
	// Gravity
	totalForce += gravityForce;

	// Wind
	totalForce += ComputeWindForce(position);

	// Springs
	totalForce += ComputeElasticForce(position);

	// Stokes' law
	totalForce -= velocity * drag;

	// Compute acceleration due to total force to the particle
	vec3 acceleration = totalForce / particleMass;
 
	// Calculate the next position and velocity using the euler symplectic integrator
	vec3 newVelocity = velocity + acceleration * deltaTime;
	vec3 newPosition = position + newVelocity * deltaTime;	
	
	// Load updated data in the output buffer
	nodesOut[gl_GlobalInvocationID.x].oldPos = vec4(position, 1.0);
	nodesOut[gl_GlobalInvocationID.x].pos = vec4(newPosition, 1.0);
	nodesOut[gl_GlobalInvocationID.x].vel = vec4(newVelocity, 0.0);
}