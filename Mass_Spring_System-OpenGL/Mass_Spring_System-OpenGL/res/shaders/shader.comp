#version 460

layout ( local_size_x = 10, local_size_y = 1, local_size_z = 1 ) in;

struct Vertex {
    vec3 pos;
	float dummyPos;
	vec3 color;
	float dummyCol;
	vec3 normal;
	float dummyNor;
	vec2 uv;
	vec2 dummyUv;
};

layout(std430) buffer;
layout ( binding = 0 ) buffer VertexBuffer {
	Vertex vertices[];
};
layout ( binding = 1 ) buffer VertexBufferAlternate {
	Vertex verticesAlternate[];
};

//A should be the particle, B the neighbour
vec3 elasticForce ( vec3 positionA, vec3 positionB ) 
{
	float stiffness = 1000.0;
	float restLength = 10.0;

	vec3 AtoBVector = positionB - positionA;
	vec3 AtoBDirection = normalize(AtoBVector);
	float AtoBDistance = length(AtoBVector);

	vec3 force = stiffness * (AtoBDistance - restLength) * AtoBDirection;

	return force;
}

void eulerIntegrator ( int idx, vec3 totalForce ) {
	float deltaTime = 0.016;
	float mass=1.0;

	vec3 accel=totalForce/mass;
	//PositionOut[idx] = vec4(p + v * DeltaT + 0.5 * a * DeltaT * DeltaT, 1.0);
	//VelocityOut[idx] = vec4( v + a * DeltaT, 0.0);
}

void main() 
{
	//uint idx = uint(mod(gl_LocalInvocationID.x, 2));

	uint idx = gl_GlobalInvocationID.x;
	
	vertices[idx].pos.x += 0.016;
	vertices[idx].pos.y += 0.016;
	//vertices[idx].pos.z += 0.016;
}